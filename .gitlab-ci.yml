include:
  - local: "CI/template.yml"

# Any of these variables can be defined in the pipeline, for ease of
# reading only often changed variables are kept here. All variables are
# defined with their default shared across all other pipeline values in ml_pipeline.yml
# Name = Name of child pipeline
# Inputs = Which input configuration to use
# Model = Name of yaml config to use, found in tagger/model/configs
# N_PARAMS = Number of tracking parameters for the track fit
# TRACK_ALGO = Tracking Algorithm, baseline or extended
# TRAIN = Which dataset to use for training
# MINBIAS = Which MinBias to use for rate calculations
# BBBB = Which dataset to use for HH->BBBB efficiency studies
# BBBB_EOS_DIR = Which folder to find the BBBB dataset in
# BBTT = Which dataset to use for BBTauTau efficiency studies
# BBTT_EOS_DIR = Which folder to find the BBTauTau dataset in
# VBFHTAUTAU = Which dataset to use for the VBF->H->TauTau studies
# SIGNAL = Which dataset to use for a specific signal set of ROC curves
# EOS_DATA_DIR = Data directory on eos containing the  above root files
# EOS_DATA_DIR = Where to find the train, minbias, vbfhtautau and signal datasets
# EOS_STORAGE_DIR = Directory to store output products
# EOS_STORAGE_SUBDIR  = Sub Directory for pipeline specific output
# EOS_STORAGE_DATADIR = Sub directory to store branch intermediate training files
# CMSSW_VERSION = Which CMSSW release to run the emulator in
# CMSSW_L1CT = Which CMSSW fork:branch to run the emulator in
# CMSSW_EMULATOR_WRAPPER = Which CMSSW emulator wrapper to use
# RERUN_ON_TAG = Switch to only run the evaluation and firmware steps on the tagged model and not rerun a training.
# Default false to run a full retraining of a model
# RUN_EMULATION = Switch to turn on the CMSSW emulator, need to have a working CMSSW emualtor for this. Has to run for rerun on tag. Tagged models need FW
# RUN_SYNTHESIS = Switch to turn on the hls4ml and synthesis steps. Emulator needs synthesis to run
# TAG = Which tag of the model to run the evaluation on if RERUN_ON_TAG = 'True'


VectorTreee:vector_tree_5param_extended_trk:
  extends: .ml_pipeline
  variables:
    Name: vector_tree
    Model: vectortree
    RERUN_ON_TAG: 'False'
    RUN_EMULATION: 'False'
    RUN_SYNTHESIS: 'False'
    RUN_TUNE: 'True'
    IMAGE: gitlab-registry.cern.ch/ml_l1/ops/docker-images/mamba_jettagger:latest-gpu

DeepSet:baseline_5param_extended_trk:
  extends: .ml_pipeline
  variables:
    Name: baseline_5param_extended_trk
    Model: baseline
    RERUN_ON_TAG: 'False'
    RUN_EMULATION: 'True'
    RUN_SYNTHESIS: 'True'
    RUN_TUNE: 'False'

# DeepSet_reduced_precision:baseline_reduced_precision_5param_extended_trk:
#   extends: .ml_pipeline
#   variables:
#     Name: baseline_reduced_precision_5param_extended_trk
#     Model: baseline_reduced_precision
#     RERUN_ON_TAG: 'False'
#     RUN_EMULATION: 'False'
#     RUN_SYNTHESIS: 'True'

# DeepSet_larger:baseline_larger_5param_extended_trk:
#   extends: .ml_pipeline
#   variables:
#     Name: baseline_larger_5param_extended_trk
#     Model: baseline_larger
#     RERUN_ON_TAG: 'False'
#     RUN_EMULATION: 'False'
#     RUN_SYNTHESIS: 'True'

# DeepSet_attention:baseline_attention_5param_extended_trk:
#   extends: .ml_pipeline
#   variables:
#     Name: baseline_attention_5param_extended_trk
#     Inputs: baseline
#     Model: baseline_attention
#     RERUN_ON_TAG: 'False'
#     RUN_EMULATION: 'False'
#     RUN_SYNTHESIS: 'False'

# interactionnet:interactionnet_5param_extended_trk:
#   extends: .ml_pipeline
#   variables:
#     Name: interactionnet_5param_extended_trk
#     Model: interactionnet
#     RERUN_ON_TAG: 'False'
#     RUN_EMULATION: 'False'
#     RUN_SYNTHESIS: 'False'
