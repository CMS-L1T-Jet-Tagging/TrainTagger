-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity JetTaggerNN_dense_latency_ap_ufixed_9_0_4_0_0_ap_fixed_30_12_5_3_0_config23_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (8 downto 0);
    layer23_out : OUT STD_LOGIC_VECTOR (29 downto 0);
    layer23_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of JetTaggerNN_dense_latency_ap_ufixed_9_0_4_0_0_ap_fixed_30_12_5_3_0_config23_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv20_FFCD1 : STD_LOGIC_VECTOR (19 downto 0) := "11111111110011010001";
    constant ap_const_lv18_3FF2C : STD_LOGIC_VECTOR (17 downto 0) := "111111111100101100";
    constant ap_const_lv18_134 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100110100";
    constant ap_const_lv16_71 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001110001";
    constant ap_const_lv18_10D : STD_LOGIC_VECTOR (17 downto 0) := "000000000100001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_6C : STD_LOGIC_VECTOR (7 downto 0) := "01101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_read817_reg_681 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read716_reg_686 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read615_reg_691 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read514_reg_696 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read413_reg_701 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read211_reg_707 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read_1472_reg_713 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln818_s_reg_718 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln818_s_reg_723 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_reg_728 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln818_3221_reg_733 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_738 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln818_3222_reg_743 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_748 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_3223_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln6_reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln813_4339_fu_586_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln813_4339_reg_763 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln813_4336_fu_631_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4336_reg_768 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4340_fu_650_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_4340_reg_773 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln66_fu_676_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal layer23_out_preg : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_163_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_163_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_3537_fu_164_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3537_fu_164_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3536_fu_167_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3536_fu_167_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln818_fu_168_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln818_fu_168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3535_fu_169_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3535_fu_169_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_386_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1273_fu_394_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_3532_fu_398_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_163_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1273_s_fu_441_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1273_1419_fu_452_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1273_823_fu_448_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1273_824_fu_459_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3533_fu_463_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1273_1420_fu_482_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_1421_fu_493_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1273_825_fu_489_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1273_826_fu_500_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3534_fu_504_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3535_fu_169_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3536_fu_167_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3537_fu_164_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln818_fu_168_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln70_64_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln813_4338_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln813_396_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln818_1072_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln70_96_fu_598_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln813_fu_610_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln813_fu_607_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_fu_592_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4334_fu_619_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln70_99_fu_601_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4335_fu_625_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_395_fu_615_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_65_fu_595_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln818_fu_604_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_4337_fu_637_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_397_fu_647_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_629_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_630_fu_659_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln813_fu_656_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_V_fu_662_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_423_fu_668_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln818_fu_168_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3535_fu_169_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3536_fu_167_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3537_fu_164_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_163_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component JetTaggerNN_mul_9ns_11s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component JetTaggerNN_mul_9ns_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component JetTaggerNN_mul_9ns_10ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component JetTaggerNN_mul_9ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_9ns_11s_20_1_1_U3716 : component JetTaggerNN_mul_9ns_11s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => r_V_fu_163_p0,
        din1 => r_V_fu_163_p1,
        dout => r_V_fu_163_p2);

    mul_9ns_9s_18_1_1_U3717 : component JetTaggerNN_mul_9ns_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_3537_fu_164_p0,
        din1 => r_V_3537_fu_164_p1,
        dout => r_V_3537_fu_164_p2);

    mul_9ns_10ns_18_1_1_U3718 : component JetTaggerNN_mul_9ns_10ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_3536_fu_167_p0,
        din1 => r_V_3536_fu_167_p1,
        dout => r_V_3536_fu_167_p2);

    mul_9ns_8ns_16_1_1_U3719 : component JetTaggerNN_mul_9ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln818_fu_168_p0,
        din1 => mul_ln818_fu_168_p1,
        dout => mul_ln818_fu_168_p2);

    mul_9ns_10ns_18_1_1_U3720 : component JetTaggerNN_mul_9ns_10ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_3535_fu_169_p0,
        din1 => r_V_3535_fu_169_p1,
        dout => r_V_3535_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    layer23_out_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer23_out_preg(8) <= '0';
                layer23_out_preg(9) <= '0';
                layer23_out_preg(10) <= '0';
                layer23_out_preg(11) <= '0';
                layer23_out_preg(12) <= '0';
                layer23_out_preg(13) <= '0';
                layer23_out_preg(14) <= '0';
                layer23_out_preg(15) <= '0';
                layer23_out_preg(16) <= '0';
                layer23_out_preg(17) <= '0';
                layer23_out_preg(18) <= '0';
                layer23_out_preg(19) <= '0';
                layer23_out_preg(20) <= '0';
                layer23_out_preg(21) <= '0';
                layer23_out_preg(22) <= '0';
                layer23_out_preg(23) <= '0';
                layer23_out_preg(24) <= '0';
                layer23_out_preg(25) <= '0';
                layer23_out_preg(26) <= '0';
                layer23_out_preg(27) <= '0';
                layer23_out_preg(28) <= '0';
                layer23_out_preg(29) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                                        layer23_out_preg(29 downto 8) <= sext_ln66_fu_676_p1(29 downto 8);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln813_4336_reg_768 <= add_ln813_4336_fu_631_p2;
                add_ln813_4340_reg_773 <= add_ln813_4340_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln813_4339_reg_763 <= add_ln813_4339_fu_586_p2;
                lshr_ln818_s_reg_723 <= p_read3(8 downto 2);
                p_read211_reg_707 <= p_read2;
                p_read413_reg_701 <= p_read4;
                p_read514_reg_696 <= p_read5;
                p_read615_reg_691 <= p_read6;
                p_read716_reg_686 <= p_read7;
                p_read817_reg_681 <= p_read8;
                p_read_1472_reg_713 <= p_read;
                tmp_reg_738 <= r_V_3534_fu_504_p2(16 downto 8);
                tmp_s_reg_748 <= r_V_3536_fu_167_p2(17 downto 8);
                trunc_ln6_reg_758 <= mul_ln818_fu_168_p2(15 downto 8);
                trunc_ln818_3221_reg_733 <= r_V_3533_fu_463_p2(17 downto 8);
                trunc_ln818_3222_reg_743 <= r_V_3535_fu_169_p2(17 downto 8);
                trunc_ln818_3223_reg_753 <= r_V_3537_fu_164_p2(17 downto 8);
                trunc_ln818_s_reg_718 <= r_V_3532_fu_398_p2(14 downto 8);
                trunc_ln_reg_728 <= r_V_fu_163_p2(19 downto 8);
            end if;
        end if;
    end process;
    layer23_out_preg(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_4334_fu_619_p2 <= std_logic_vector(unsigned(zext_ln813_fu_607_p1) + unsigned(sext_ln70_fu_592_p1));
    add_ln813_4335_fu_625_p2 <= std_logic_vector(unsigned(add_ln813_4334_fu_619_p2) + unsigned(zext_ln70_99_fu_601_p1));
    add_ln813_4336_fu_631_p2 <= std_logic_vector(unsigned(add_ln813_4335_fu_625_p2) + unsigned(zext_ln813_395_fu_615_p1));
    add_ln813_4337_fu_637_p2 <= std_logic_vector(signed(sext_ln70_65_fu_595_p1) + signed(sext_ln818_fu_604_p1));
    add_ln813_4338_fu_576_p2 <= std_logic_vector(signed(sext_ln70_64_fu_438_p1) + signed(ap_const_lv8_6C));
    add_ln813_4339_fu_586_p2 <= std_logic_vector(unsigned(zext_ln813_396_fu_582_p1) + unsigned(zext_ln818_1072_fu_479_p1));
    add_ln813_4340_fu_650_p2 <= std_logic_vector(unsigned(zext_ln813_397_fu_647_p1) + unsigned(sext_ln813_629_fu_643_p1));
    add_ln813_fu_610_p2 <= std_logic_vector(unsigned(zext_ln70_96_fu_598_p1) + unsigned(trunc_ln818_3222_reg_743));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    layer23_out_assign_proc : process(ap_enable_reg_pp0_iter3, sext_ln66_fu_676_p1, layer23_out_preg, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            layer23_out <= sext_ln66_fu_676_p1;
        else 
            layer23_out <= layer23_out_preg;
        end if; 
    end process;


    layer23_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            layer23_out_ap_vld <= ap_const_logic_1;
        else 
            layer23_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln818_fu_168_p0 <= mul_ln818_fu_168_p00(9 - 1 downto 0);
    mul_ln818_fu_168_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read817_reg_681),16));
    mul_ln818_fu_168_p1 <= ap_const_lv16_71(8 - 1 downto 0);
    r_V_3532_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(zext_ln1273_fu_394_p1));
    r_V_3533_fu_463_p2 <= std_logic_vector(unsigned(zext_ln1273_823_fu_448_p1) - unsigned(zext_ln1273_824_fu_459_p1));
    r_V_3534_fu_504_p2 <= std_logic_vector(unsigned(zext_ln1273_825_fu_489_p1) + unsigned(zext_ln1273_826_fu_500_p1));
    r_V_3535_fu_169_p0 <= r_V_3535_fu_169_p00(9 - 1 downto 0);
    r_V_3535_fu_169_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read514_reg_696),18));
    r_V_3535_fu_169_p1 <= ap_const_lv18_10D(10 - 1 downto 0);
    r_V_3536_fu_167_p0 <= r_V_3536_fu_167_p00(9 - 1 downto 0);
    r_V_3536_fu_167_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read615_reg_691),18));
    r_V_3536_fu_167_p1 <= ap_const_lv18_134(10 - 1 downto 0);
    r_V_3537_fu_164_p0 <= r_V_3537_fu_164_p00(9 - 1 downto 0);
    r_V_3537_fu_164_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read716_reg_686),18));
    r_V_3537_fu_164_p1 <= ap_const_lv18_3FF2C(9 - 1 downto 0);
    r_V_fu_163_p0 <= r_V_fu_163_p00(9 - 1 downto 0);
    r_V_fu_163_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_1472_reg_713),20));
    r_V_fu_163_p1 <= ap_const_lv20_FFCD1(11 - 1 downto 0);
        sext_ln66_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_423_fu_668_p3),30));

        sext_ln70_64_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_s_reg_718),8));

        sext_ln70_65_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_3221_reg_733),11));

        sext_ln70_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_728),13));

        sext_ln813_629_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_4337_fu_637_p2),12));

        sext_ln813_630_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_4340_reg_773),14));

        sext_ln813_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_4336_reg_768),14));

        sext_ln818_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_3223_reg_753),11));

    shl_ln1273_1419_fu_452_p3 <= (p_read211_reg_707 & ap_const_lv2_0);
    shl_ln1273_1420_fu_482_p3 <= (p_read413_reg_701 & ap_const_lv7_0);
    shl_ln1273_1421_fu_493_p3 <= (p_read413_reg_701 & ap_const_lv4_0);
    shl_ln1273_s_fu_441_p3 <= (p_read211_reg_707 & ap_const_lv8_0);
    shl_ln_fu_386_p3 <= (p_read1 & ap_const_lv5_0);
    tmp_423_fu_668_p3 <= (x_V_fu_662_p2 & ap_const_lv8_0);
    x_V_fu_662_p2 <= std_logic_vector(signed(sext_ln813_630_fu_659_p1) + signed(sext_ln813_fu_656_p1));
    zext_ln1273_823_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_s_fu_441_p3),18));
    zext_ln1273_824_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_1419_fu_452_p3),18));
    zext_ln1273_825_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_1420_fu_482_p3),17));
    zext_ln1273_826_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_1421_fu_493_p3),17));
    zext_ln1273_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_386_p3),15));
    zext_ln70_96_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_738),10));
    zext_ln70_99_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_748),13));
    zext_ln813_395_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_fu_610_p2),13));
    zext_ln813_396_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_4338_fu_576_p2),9));
    zext_ln813_397_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_4339_reg_763),12));
    zext_ln813_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln6_reg_758),13));
    zext_ln818_1072_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln818_s_reg_723),9));
end behav;
