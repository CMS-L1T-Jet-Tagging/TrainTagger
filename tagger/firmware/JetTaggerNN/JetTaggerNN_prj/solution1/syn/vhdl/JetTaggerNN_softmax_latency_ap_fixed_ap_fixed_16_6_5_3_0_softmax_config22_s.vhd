-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (20 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (20 downto 0);
    layer22_out_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_0_ap_vld : OUT STD_LOGIC;
    layer22_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_1_ap_vld : OUT STD_LOGIC;
    layer22_out_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_2_ap_vld : OUT STD_LOGIC;
    layer22_out_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_3_ap_vld : OUT STD_LOGIC;
    layer22_out_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_4_ap_vld : OUT STD_LOGIC;
    layer22_out_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_5_ap_vld : OUT STD_LOGIC;
    layer22_out_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_6_ap_vld : OUT STD_LOGIC;
    layer22_out_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer22_out_7_ap_vld : OUT STD_LOGIC );
end;


architecture behav of JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_1_reg_1050 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_1055 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_reg_1080 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_res_V_reg_1125 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_1125_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_1125_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_1125_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_reg_1125_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_1131 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_1131_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_1131_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_1131_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_8_reg_1131_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_9_reg_1137 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_9_reg_1137_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_9_reg_1137_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_9_reg_1137_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_9_reg_1137_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_10_reg_1143 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_10_reg_1143_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_10_reg_1143_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_10_reg_1143_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_10_reg_1143_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_11_reg_1149 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_11_reg_1149_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_11_reg_1149_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_11_reg_1149_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_11_reg_1149_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_12_reg_1155 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_12_reg_1155_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_12_reg_1155_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_12_reg_1155_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_12_reg_1155_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_13_reg_1161 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_13_reg_1161_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_13_reg_1161_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_13_reg_1161_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_13_reg_1161_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_14_reg_1167 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_14_reg_1167_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_14_reg_1167_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_14_reg_1167_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_14_reg_1167_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_21_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_552_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_3_reg_1180 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_22_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_676_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_reg_1200 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_26_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_878_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_18_reg_1213 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1223 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_fu_997_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_reg_1228 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_1_fu_1003_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_1_reg_1233 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_2_fu_1009_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_2_reg_1238 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_3_fu_1015_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_3_reg_1243 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_4_fu_1021_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_4_reg_1248 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_5_fu_1027_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_5_reg_1253 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_6_fu_1033_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_6_reg_1258 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_7_fu_1039_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_7_reg_1263 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln198_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln198_1_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_2_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_3_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_4_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_5_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_6_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_7_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal layer22_out_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal layer22_out_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal layer22_out_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sext_ln198_fu_378_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_1_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_2_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_3_fu_402_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_4_fu_410_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_5_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_6_fu_426_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln198_7_fu_434_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln43_1_fu_445_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_fu_442_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_448_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_1_fu_470_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_3_fu_489_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_2_fu_486_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_492_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_2_fu_514_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_2_fu_478_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_2_fu_522_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln813_3_fu_534_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln813_2_fu_530_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_538_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln43_5_fu_569_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_4_fu_566_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_572_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_3_fu_594_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_7_fu_613_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_6_fu_610_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_616_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_4_fu_638_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_5_fu_602_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_5_fu_646_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln813_5_fu_658_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln813_4_fu_654_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_662_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal xor_ln895_1_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_1_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_2_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln302_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_fu_726_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln350_fu_733_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln895_2_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_3_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_6_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_4_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln302_1_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_5_fu_784_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln350_1_fu_791_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_6_fu_740_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_6_fu_798_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln813_fu_806_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln813_1_fu_810_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_2_fu_814_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_9_fu_828_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_27_fu_820_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_fu_834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_860_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_868_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1270_fu_997_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1273_fu_890_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_fu_997_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_1_fu_1003_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_1_fu_1003_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_2_fu_1009_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_2_fu_1009_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_3_fu_1015_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_3_fu_1015_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_4_fu_1021_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_4_fu_1021_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_5_fu_1027_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_5_fu_1027_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_6_fu_1033_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_6_fu_1033_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1270_7_fu_1039_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_7_fu_1039_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1270_1_fu_1003_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_2_fu_1009_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_3_fu_1015_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_4_fu_1021_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_5_fu_1027_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_6_fu_1033_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_7_fu_1039_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1270_fu_997_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component JetTaggerNN_mul_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s_exp_table_ROMbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s_invert_table_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s_exp_table_ROMbkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7);

    invert_table_U : component JetTaggerNN_softmax_latency_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config22_s_invert_table_cud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_mul_18s_17ns_26_1_1_U3689 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_fu_997_p0,
        din1 => mul_ln1270_fu_997_p1,
        dout => mul_ln1270_fu_997_p2);

    mul_mul_18s_17ns_26_1_1_U3690 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_1_fu_1003_p0,
        din1 => mul_ln1270_1_fu_1003_p1,
        dout => mul_ln1270_1_fu_1003_p2);

    mul_mul_18s_17ns_26_1_1_U3691 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_2_fu_1009_p0,
        din1 => mul_ln1270_2_fu_1009_p1,
        dout => mul_ln1270_2_fu_1009_p2);

    mul_mul_18s_17ns_26_1_1_U3692 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_3_fu_1015_p0,
        din1 => mul_ln1270_3_fu_1015_p1,
        dout => mul_ln1270_3_fu_1015_p2);

    mul_mul_18s_17ns_26_1_1_U3693 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_4_fu_1021_p0,
        din1 => mul_ln1270_4_fu_1021_p1,
        dout => mul_ln1270_4_fu_1021_p2);

    mul_mul_18s_17ns_26_1_1_U3694 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_5_fu_1027_p0,
        din1 => mul_ln1270_5_fu_1027_p1,
        dout => mul_ln1270_5_fu_1027_p2);

    mul_mul_18s_17ns_26_1_1_U3695 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_6_fu_1033_p0,
        din1 => mul_ln1270_6_fu_1033_p1,
        dout => mul_ln1270_6_fu_1033_p2);

    mul_mul_18s_17ns_26_1_1_U3696 : component JetTaggerNN_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1270_7_fu_1039_p0,
        din1 => mul_ln1270_7_fu_1039_p1,
        dout => mul_ln1270_7_fu_1039_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    layer22_out_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_0_preg <= mul_ln1270_reg_1228(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_1_preg <= mul_ln1270_1_reg_1233(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_2_preg <= mul_ln1270_2_reg_1238(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_3_preg <= mul_ln1270_3_reg_1243(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_4_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_4_preg <= mul_ln1270_4_reg_1248(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_5_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_5_preg <= mul_ln1270_5_reg_1253(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_6_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_6_preg <= mul_ln1270_6_reg_1258(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    layer22_out_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                layer22_out_7_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    layer22_out_7_preg <= mul_ln1270_7_reg_1263(25 downto 10);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_V_10_reg_1143 <= exp_table_q4;
                exp_res_V_11_reg_1149 <= exp_table_q3;
                exp_res_V_12_reg_1155 <= exp_table_q2;
                exp_res_V_13_reg_1161 <= exp_table_q1;
                exp_res_V_14_reg_1167 <= exp_table_q0;
                exp_res_V_8_reg_1131 <= exp_table_q6;
                exp_res_V_9_reg_1137 <= exp_table_q5;
                exp_res_V_reg_1125 <= exp_table_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_V_10_reg_1143_pp0_iter3_reg <= exp_res_V_10_reg_1143;
                exp_res_V_10_reg_1143_pp0_iter4_reg <= exp_res_V_10_reg_1143_pp0_iter3_reg;
                exp_res_V_10_reg_1143_pp0_iter5_reg <= exp_res_V_10_reg_1143_pp0_iter4_reg;
                exp_res_V_10_reg_1143_pp0_iter6_reg <= exp_res_V_10_reg_1143_pp0_iter5_reg;
                exp_res_V_11_reg_1149_pp0_iter3_reg <= exp_res_V_11_reg_1149;
                exp_res_V_11_reg_1149_pp0_iter4_reg <= exp_res_V_11_reg_1149_pp0_iter3_reg;
                exp_res_V_11_reg_1149_pp0_iter5_reg <= exp_res_V_11_reg_1149_pp0_iter4_reg;
                exp_res_V_11_reg_1149_pp0_iter6_reg <= exp_res_V_11_reg_1149_pp0_iter5_reg;
                exp_res_V_12_reg_1155_pp0_iter3_reg <= exp_res_V_12_reg_1155;
                exp_res_V_12_reg_1155_pp0_iter4_reg <= exp_res_V_12_reg_1155_pp0_iter3_reg;
                exp_res_V_12_reg_1155_pp0_iter5_reg <= exp_res_V_12_reg_1155_pp0_iter4_reg;
                exp_res_V_12_reg_1155_pp0_iter6_reg <= exp_res_V_12_reg_1155_pp0_iter5_reg;
                exp_res_V_13_reg_1161_pp0_iter3_reg <= exp_res_V_13_reg_1161;
                exp_res_V_13_reg_1161_pp0_iter4_reg <= exp_res_V_13_reg_1161_pp0_iter3_reg;
                exp_res_V_13_reg_1161_pp0_iter5_reg <= exp_res_V_13_reg_1161_pp0_iter4_reg;
                exp_res_V_13_reg_1161_pp0_iter6_reg <= exp_res_V_13_reg_1161_pp0_iter5_reg;
                exp_res_V_14_reg_1167_pp0_iter3_reg <= exp_res_V_14_reg_1167;
                exp_res_V_14_reg_1167_pp0_iter4_reg <= exp_res_V_14_reg_1167_pp0_iter3_reg;
                exp_res_V_14_reg_1167_pp0_iter5_reg <= exp_res_V_14_reg_1167_pp0_iter4_reg;
                exp_res_V_14_reg_1167_pp0_iter6_reg <= exp_res_V_14_reg_1167_pp0_iter5_reg;
                exp_res_V_8_reg_1131_pp0_iter3_reg <= exp_res_V_8_reg_1131;
                exp_res_V_8_reg_1131_pp0_iter4_reg <= exp_res_V_8_reg_1131_pp0_iter3_reg;
                exp_res_V_8_reg_1131_pp0_iter5_reg <= exp_res_V_8_reg_1131_pp0_iter4_reg;
                exp_res_V_8_reg_1131_pp0_iter6_reg <= exp_res_V_8_reg_1131_pp0_iter5_reg;
                exp_res_V_9_reg_1137_pp0_iter3_reg <= exp_res_V_9_reg_1137;
                exp_res_V_9_reg_1137_pp0_iter4_reg <= exp_res_V_9_reg_1137_pp0_iter3_reg;
                exp_res_V_9_reg_1137_pp0_iter5_reg <= exp_res_V_9_reg_1137_pp0_iter4_reg;
                exp_res_V_9_reg_1137_pp0_iter6_reg <= exp_res_V_9_reg_1137_pp0_iter5_reg;
                exp_res_V_reg_1125_pp0_iter3_reg <= exp_res_V_reg_1125;
                exp_res_V_reg_1125_pp0_iter4_reg <= exp_res_V_reg_1125_pp0_iter3_reg;
                exp_res_V_reg_1125_pp0_iter5_reg <= exp_res_V_reg_1125_pp0_iter4_reg;
                exp_res_V_reg_1125_pp0_iter6_reg <= exp_res_V_reg_1125_pp0_iter5_reg;
                inv_exp_sum_V_reg_1223 <= invert_table_q0;
                mul_ln1270_1_reg_1233 <= mul_ln1270_1_fu_1003_p2;
                mul_ln1270_2_reg_1238 <= mul_ln1270_2_fu_1009_p2;
                mul_ln1270_3_reg_1243 <= mul_ln1270_3_fu_1015_p2;
                mul_ln1270_4_reg_1248 <= mul_ln1270_4_fu_1021_p2;
                mul_ln1270_5_reg_1253 <= mul_ln1270_5_fu_1027_p2;
                mul_ln1270_6_reg_1258 <= mul_ln1270_6_fu_1033_p2;
                mul_ln1270_7_reg_1263 <= mul_ln1270_7_fu_1039_p2;
                mul_ln1270_reg_1228 <= mul_ln1270_fu_997_p2;
                p_Result_18_reg_1213 <= p_Result_18_fu_878_p3;
                p_Result_21_reg_1173 <= ret_V_fu_538_p2(18 downto 18);
                p_Result_22_reg_1186 <= p_Val2_3_fu_552_p2(17 downto 17);
                p_Result_25_reg_1193 <= ret_V_1_fu_662_p2(18 downto 18);
                p_Result_26_reg_1206 <= p_Val2_7_fu_676_p2(17 downto 17);
                p_Val2_3_reg_1180 <= p_Val2_3_fu_552_p2;
                p_Val2_7_reg_1200 <= p_Val2_7_fu_676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_1_reg_1050 <= p_read1(20 downto 13);
                p_Result_2_reg_1055 <= p_read2(20 downto 13);
                p_Result_3_reg_1060 <= p_read3(20 downto 13);
                p_Result_4_reg_1065 <= p_read4(20 downto 13);
                p_Result_5_reg_1070 <= p_read5(20 downto 13);
                p_Result_6_reg_1075 <= p_read6(20 downto 13);
                p_Result_7_reg_1080 <= p_read7(20 downto 13);
                p_Result_s_reg_1045 <= p_read(20 downto 13);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter8, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to7)
    begin
        if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table_address0 <= zext_ln198_7_fu_437_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln198_6_fu_429_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln198_5_fu_421_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln198_4_fu_413_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln198_3_fu_405_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln198_2_fu_397_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln198_1_fu_389_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln198_fu_381_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    invert_table_address0 <= zext_ln208_fu_886_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_0_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_reg_1228, layer22_out_0_preg, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_0 <= mul_ln1270_reg_1228(25 downto 10);
        else 
            layer22_out_0 <= layer22_out_0_preg;
        end if; 
    end process;


    layer22_out_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_1_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_1_reg_1233, ap_block_pp0_stage0_01001, layer22_out_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_1 <= mul_ln1270_1_reg_1233(25 downto 10);
        else 
            layer22_out_1 <= layer22_out_1_preg;
        end if; 
    end process;


    layer22_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_2_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_2_reg_1238, ap_block_pp0_stage0_01001, layer22_out_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_2 <= mul_ln1270_2_reg_1238(25 downto 10);
        else 
            layer22_out_2 <= layer22_out_2_preg;
        end if; 
    end process;


    layer22_out_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_3_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_3_reg_1243, ap_block_pp0_stage0_01001, layer22_out_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_3 <= mul_ln1270_3_reg_1243(25 downto 10);
        else 
            layer22_out_3 <= layer22_out_3_preg;
        end if; 
    end process;


    layer22_out_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_4_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_4_reg_1248, ap_block_pp0_stage0_01001, layer22_out_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_4 <= mul_ln1270_4_reg_1248(25 downto 10);
        else 
            layer22_out_4 <= layer22_out_4_preg;
        end if; 
    end process;


    layer22_out_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_5_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_5_reg_1253, ap_block_pp0_stage0_01001, layer22_out_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_5 <= mul_ln1270_5_reg_1253(25 downto 10);
        else 
            layer22_out_5 <= layer22_out_5_preg;
        end if; 
    end process;


    layer22_out_5_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_6_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_6_reg_1258, ap_block_pp0_stage0_01001, layer22_out_6_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_6 <= mul_ln1270_6_reg_1258(25 downto 10);
        else 
            layer22_out_6 <= layer22_out_6_preg;
        end if; 
    end process;


    layer22_out_6_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    layer22_out_7_assign_proc : process(ap_enable_reg_pp0_iter8, mul_ln1270_7_reg_1263, ap_block_pp0_stage0_01001, layer22_out_7_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_7 <= mul_ln1270_7_reg_1263(25 downto 10);
        else 
            layer22_out_7 <= layer22_out_7_preg;
        end if; 
    end process;


    layer22_out_7_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            layer22_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer22_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lhs_2_fu_478_p3 <= 
        select_ln346_1_fu_470_p3 when (p_Result_19_fu_454_p3(0) = '1') else 
        p_Val2_s_fu_448_p2;
    lhs_5_fu_602_p3 <= 
        select_ln346_3_fu_594_p3 when (p_Result_23_fu_578_p3(0) = '1') else 
        p_Val2_4_fu_572_p2;
    lhs_6_fu_740_p3 <= 
        select_ln302_fu_726_p3 when (or_ln302_fu_720_p2(0) = '1') else 
        select_ln350_fu_733_p3;
    mul_ln1270_1_fu_1003_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_1_fu_1003_p1 <= mul_ln1270_1_fu_1003_p10(17 - 1 downto 0);
    mul_ln1270_1_fu_1003_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_8_reg_1131_pp0_iter6_reg),26));
    mul_ln1270_2_fu_1009_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_2_fu_1009_p1 <= mul_ln1270_2_fu_1009_p10(17 - 1 downto 0);
    mul_ln1270_2_fu_1009_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_9_reg_1137_pp0_iter6_reg),26));
    mul_ln1270_3_fu_1015_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_3_fu_1015_p1 <= mul_ln1270_3_fu_1015_p10(17 - 1 downto 0);
    mul_ln1270_3_fu_1015_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_10_reg_1143_pp0_iter6_reg),26));
    mul_ln1270_4_fu_1021_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_4_fu_1021_p1 <= mul_ln1270_4_fu_1021_p10(17 - 1 downto 0);
    mul_ln1270_4_fu_1021_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_11_reg_1149_pp0_iter6_reg),26));
    mul_ln1270_5_fu_1027_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_5_fu_1027_p1 <= mul_ln1270_5_fu_1027_p10(17 - 1 downto 0);
    mul_ln1270_5_fu_1027_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_12_reg_1155_pp0_iter6_reg),26));
    mul_ln1270_6_fu_1033_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_6_fu_1033_p1 <= mul_ln1270_6_fu_1033_p10(17 - 1 downto 0);
    mul_ln1270_6_fu_1033_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_13_reg_1161_pp0_iter6_reg),26));
    mul_ln1270_7_fu_1039_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_7_fu_1039_p1 <= mul_ln1270_7_fu_1039_p10(17 - 1 downto 0);
    mul_ln1270_7_fu_1039_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_14_reg_1167_pp0_iter6_reg),26));
    mul_ln1270_fu_997_p0 <= sext_ln1273_fu_890_p1(18 - 1 downto 0);
    mul_ln1270_fu_997_p1 <= mul_ln1270_fu_997_p10(17 - 1 downto 0);
    mul_ln1270_fu_997_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_reg_1125_pp0_iter6_reg),26));
    or_ln302_1_fu_778_p2 <= (xor_ln302_4_fu_772_p2 or overflow_6_fu_753_p2);
    or_ln302_fu_720_p2 <= (xor_ln302_2_fu_714_p2 or overflow_3_fu_695_p2);
    overflow_3_fu_695_p2 <= (xor_ln895_1_fu_690_p2 and p_Result_22_reg_1186);
    overflow_6_fu_753_p2 <= (xor_ln895_2_fu_748_p2 and p_Result_26_reg_1206);
    overflow_fu_848_p2 <= (xor_ln895_fu_842_p2 and p_Result_28_fu_834_p3);
    p_Result_18_fu_878_p3 <= 
        select_ln346_fu_860_p3 when (xor_ln302_fu_854_p2(0) = '1') else 
        tmp_fu_868_p4;
    p_Result_19_fu_454_p3 <= p_Val2_s_fu_448_p2(17 downto 17);
    p_Result_20_fu_498_p3 <= p_Val2_1_fu_492_p2(17 downto 17);
    p_Result_23_fu_578_p3 <= p_Val2_4_fu_572_p2(17 downto 17);
    p_Result_24_fu_622_p3 <= p_Val2_5_fu_616_p2(17 downto 17);
    p_Result_27_fu_820_p3 <= ret_V_2_fu_814_p2(18 downto 18);
    p_Result_28_fu_834_p3 <= p_Val2_9_fu_828_p2(17 downto 17);
    p_Val2_1_fu_492_p2 <= std_logic_vector(unsigned(zext_ln43_3_fu_489_p1) + unsigned(zext_ln43_2_fu_486_p1));
    p_Val2_3_fu_552_p2 <= std_logic_vector(signed(rhs_2_fu_522_p3) + signed(lhs_2_fu_478_p3));
    p_Val2_4_fu_572_p2 <= std_logic_vector(unsigned(zext_ln43_5_fu_569_p1) + unsigned(zext_ln43_4_fu_566_p1));
    p_Val2_5_fu_616_p2 <= std_logic_vector(unsigned(zext_ln43_7_fu_613_p1) + unsigned(zext_ln43_6_fu_610_p1));
    p_Val2_7_fu_676_p2 <= std_logic_vector(signed(rhs_5_fu_646_p3) + signed(lhs_5_fu_602_p3));
    p_Val2_9_fu_828_p2 <= std_logic_vector(signed(lhs_6_fu_740_p3) + signed(rhs_6_fu_798_p3));
    p_Val2_s_fu_448_p2 <= std_logic_vector(unsigned(zext_ln43_1_fu_445_p1) + unsigned(zext_ln43_fu_442_p1));
    ret_V_1_fu_662_p2 <= std_logic_vector(signed(sext_ln813_5_fu_658_p1) + signed(sext_ln813_4_fu_654_p1));
    ret_V_2_fu_814_p2 <= std_logic_vector(signed(sext_ln813_fu_806_p1) + signed(sext_ln813_1_fu_810_p1));
    ret_V_fu_538_p2 <= std_logic_vector(signed(sext_ln813_3_fu_534_p1) + signed(sext_ln813_2_fu_530_p1));
    rhs_2_fu_522_p3 <= 
        select_ln346_2_fu_514_p3 when (p_Result_20_fu_498_p3(0) = '1') else 
        p_Val2_1_fu_492_p2;
    rhs_5_fu_646_p3 <= 
        select_ln346_4_fu_638_p3 when (p_Result_24_fu_622_p3(0) = '1') else 
        p_Val2_5_fu_616_p2;
    rhs_6_fu_798_p3 <= 
        select_ln302_5_fu_784_p3 when (or_ln302_1_fu_778_p2(0) = '1') else 
        select_ln350_1_fu_791_p3;
    select_ln302_5_fu_784_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln302_3_fu_768_p2(0) = '1') else 
        p_Val2_7_reg_1200;
    select_ln302_fu_726_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln302_1_fu_710_p2(0) = '1') else 
        p_Val2_3_reg_1180;
    select_ln346_1_fu_470_p3 <= 
        ap_const_lv18_1FFFF when (tmp_2_fu_462_p3(0) = '1') else 
        ap_const_lv18_20000;
    select_ln346_2_fu_514_p3 <= 
        ap_const_lv18_1FFFF when (tmp_4_fu_506_p3(0) = '1') else 
        ap_const_lv18_20000;
    select_ln346_3_fu_594_p3 <= 
        ap_const_lv18_1FFFF when (tmp_8_fu_586_p3(0) = '1') else 
        ap_const_lv18_20000;
    select_ln346_4_fu_638_p3 <= 
        ap_const_lv18_1FFFF when (tmp_10_fu_630_p3(0) = '1') else 
        ap_const_lv18_20000;
    select_ln346_fu_860_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_848_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln350_1_fu_791_p3 <= 
        ap_const_lv18_20000 when (underflow_1_fu_763_p2(0) = '1') else 
        p_Val2_7_reg_1200;
    select_ln350_fu_733_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_705_p2(0) = '1') else 
        p_Val2_3_reg_1180;
        sext_ln1273_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1223),26));

        sext_ln198_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_1_reg_1050),10));

        sext_ln198_2_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_2_reg_1055),10));

        sext_ln198_3_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_3_reg_1060),10));

        sext_ln198_4_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_4_reg_1065),10));

        sext_ln198_5_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_5_reg_1070),10));

        sext_ln198_6_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_6_reg_1075),10));

        sext_ln198_7_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_7_reg_1080),10));

        sext_ln198_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_s_reg_1045),10));

        sext_ln813_1_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_6_fu_798_p3),19));

        sext_ln813_2_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_fu_478_p3),19));

        sext_ln813_3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_fu_522_p3),19));

        sext_ln813_4_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_5_fu_602_p3),19));

        sext_ln813_5_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_5_fu_646_p3),19));

        sext_ln813_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_6_fu_740_p3),19));

    tmp_10_fu_630_p3 <= p_Val2_5_fu_616_p2(17 downto 17);
    tmp_2_fu_462_p3 <= p_Val2_s_fu_448_p2(17 downto 17);
    tmp_4_fu_506_p3 <= p_Val2_1_fu_492_p2(17 downto 17);
    tmp_8_fu_586_p3 <= p_Val2_4_fu_572_p2(17 downto 17);
    tmp_fu_868_p4 <= p_Val2_9_fu_828_p2(17 downto 8);
    underflow_1_fu_763_p2 <= (xor_ln896_1_fu_758_p2 and p_Result_25_reg_1193);
    underflow_fu_705_p2 <= (xor_ln896_fu_700_p2 and p_Result_21_reg_1173);
    xor_ln302_1_fu_710_p2 <= (p_Result_22_reg_1186 xor p_Result_21_reg_1173);
    xor_ln302_2_fu_714_p2 <= (xor_ln302_1_fu_710_p2 xor ap_const_lv1_1);
    xor_ln302_3_fu_768_p2 <= (p_Result_26_reg_1206 xor p_Result_25_reg_1193);
    xor_ln302_4_fu_772_p2 <= (xor_ln302_3_fu_768_p2 xor ap_const_lv1_1);
    xor_ln302_fu_854_p2 <= (p_Result_28_fu_834_p3 xor p_Result_27_fu_820_p3);
    xor_ln895_1_fu_690_p2 <= (p_Result_21_reg_1173 xor ap_const_lv1_1);
    xor_ln895_2_fu_748_p2 <= (p_Result_25_reg_1193 xor ap_const_lv1_1);
    xor_ln895_fu_842_p2 <= (p_Result_27_fu_820_p3 xor ap_const_lv1_1);
    xor_ln896_1_fu_758_p2 <= (p_Result_26_reg_1206 xor ap_const_lv1_1);
    xor_ln896_fu_700_p2 <= (p_Result_22_reg_1186 xor ap_const_lv1_1);
    zext_ln198_1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_1_fu_386_p1),64));
    zext_ln198_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_2_fu_394_p1),64));
    zext_ln198_3_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_3_fu_402_p1),64));
    zext_ln198_4_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_4_fu_410_p1),64));
    zext_ln198_5_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_5_fu_418_p1),64));
    zext_ln198_6_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_6_fu_426_p1),64));
    zext_ln198_7_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_7_fu_434_p1),64));
    zext_ln198_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln198_fu_378_p1),64));
    zext_ln208_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_reg_1213),64));
    zext_ln43_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_8_reg_1131),18));
    zext_ln43_2_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_9_reg_1137),18));
    zext_ln43_3_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_10_reg_1143),18));
    zext_ln43_4_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_11_reg_1149),18));
    zext_ln43_5_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_12_reg_1155),18));
    zext_ln43_6_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_13_reg_1161),18));
    zext_ln43_7_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_14_reg_1167),18));
    zext_ln43_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_reg_1125),18));
end behav;
